
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПодготовитьАрхив() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Аттракционы.Ссылка)) КАК Идентификатор,
		|	ПРЕДСТАВЛЕНИЕ(Аттракционы.Ссылка) КАК Аттракцион,
		|	ПРЕДСТАВЛЕНИЕ(Аттракционы.ВидАттракциона) КАК ВидАттракциона,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
		|	Аттракционы.Фото КАК Фото
		|ИЗ
		|	Справочник.Аттракционы КАК Аттракционы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ПО Аттракционы.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ИмяКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяКаталога);
	
	ОписаниеАттракционов = Новый Массив;
	
	ШаблонИмениКартинки = "%1%2img%2%3.jpg";
	
	Пока Выборка.Следующий() Цикл
		ОписаниеАттракциона = Новый Структура;
		ОписаниеАттракциона.Вставить("Идентификатор", Выборка.Идентификатор);
		ОписаниеАттракциона.Вставить("Аттракцион", Выборка.Аттракцион);
		ОписаниеАттракциона.Вставить("ВидАттракциона", Выборка.ВидАттракциона);
		ОписаниеАттракциона.Вставить("Цена", Выборка.Цена);
		ОписаниеАттракциона.Вставить("Фото", Неопределено);
		
		ДанныеФото = Выборка.Фото.Получить();
		Если ДанныеФото <> Неопределено Тогда
			ИмяФайла = СтрШаблон(ШаблонИмениКартинки, ИмяКаталога, ПолучитьРазделительПути(), Выборка.Идентификатор);
			ДанныеФото.Записать(ИмяФайла);
			ОписаниеАттракциона.Фото = СтрШаблон(ШаблонИмениКартинки, "", ПолучитьРазделительПути(), Выборка.Идентификатор);
		КонецЕсли;
		
		ОписаниеАттракционов.Добавить(ОписаниеАттракциона);
	КонецЦикла;
	ШаблонИмениФайлаВыгрузки = "%1%2export.json";
	ИмяФайлаВыгрузки = СтрШаблон(ШаблонИмениФайлаВыгрузки, ИмяКаталога, ПолучитьРазделительПути());
	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ИмяФайлаВыгрузки);
	ЗаписатьJSON(Запись, ОписаниеАттракционов);
	Запись.Закрыть();
	
	Архиватор = Новый ЗаписьZipФайла();
	Архиватор.Добавить(ИмяКаталога + ПолучитьРазделительПути() + "*.*", , РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ДанныеАрхива = Архиватор.ПолучитьДвоичныеДанные();
	
	УдалитьФайлы(ИмяКаталога);
	Возврат ПоместитьВоВременноеХранилище(ДанныеАрхива);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти

#Область Инициализация

#КонецОбласти

#КонецЕсли
